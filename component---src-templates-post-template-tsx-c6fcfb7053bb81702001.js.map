{"version":3,"file":"component---src-templates-post-template-tsx-c6fcfb7053bb81702001.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Posts/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Posts/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Posts/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Posts/CommentWidget.tsx","webpack://gatsby-starter-default/./src/components/Posts/PostScrollIndicator.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\nimport { navigate } from 'gatsby'\n\nexport type PostHeadInfoProps = {\n  title: string\n  series: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeadInfoWrapper = styled.div`\n  display: flex;\n  max-width: 1100px;\n  width: 100%;\n  margin: 0 auto 0;\n  padding: 86px 0 40px 0;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 40px 20px;\n  }\n`\nconst PrevPageIcon = styled.div`\n  display: grid;\n  position: fixed;\n  bottom: 10%;\n  place-items: center;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: 1px solid #aaa;\n  background: #fff;\n  color: #000;\n  font-size: 22px;\n  cursor: pointer;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n\n  @media (max-width: 768px) {\n    width: 30px;\n    height: 30px;\n    font-size: 18px;\n  }\n`\nconst PostHeadInfoWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto 0;\n  max-width: 768px;\n  width: 100%;\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-box-orient: vertical;\n  font-size: 45px;\n  font-weight: 800;\n  word-break: keep-all;\n\n  @media (max-width: 768px) {\n    font-size: 30px;\n  }\n`\nconst Series = styled(Title)`\n  color: #777;\n  font-size: 30px;\n\n  @media (max-width: 768px) {\n    font-size: 22px;\n  }\n`\nconst PostData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10%;\n  font-size: 18px;\n  font-weight: 700;\n  color: #aaa;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    font-size: 15px;\n    font-weight: 400;\n  }\n`\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = ({\n  title,\n  series,\n  date,\n  categories,\n}) => {\n  const goBackPage = () => {\n    navigate(-1)\n  }\n\n  return (\n    <PostHeadInfoWrapper>\n      <PrevPageIcon onClick={goBackPage}>\n        <FontAwesomeIcon icon={faArrowLeft} color={'#aaa'} />\n      </PrevPageIcon>\n      <PostHeadInfoWrap>\n        <Series>{series}</Series>\n        <Title>{title}</Title>\n        <PostData>\n          <div>{categories.join(' / ')}</div>\n          <div>{date}</div>\n        </PostData>\n      </PostHeadInfoWrap>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport PostHeadInfo, { PostHeadInfoProps } from './PostHeadInfo'\n\ntype GatsbyImgProps = {\n  image: IGatsbyImageData\n  alt: string\n  className?: string\n}\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData | undefined\n}\n\nconst PostHeadWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  padding-top: 46px;\n  width: 100%;\n  align-items: center;\n`\n\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\n  <GatsbyImage {...props} />\n))`\n  z-index: -1;\n  max-width: 768px;\n  width: 100%;\n  object-fit: contain;\n  border-radius: 6px;\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = ({\n  title,\n  series,\n  date,\n  categories,\n  thumbnail,\n}) => {\n  return (\n    <PostHeadWrapper>\n      <PostHeadInfo\n        title={title}\n        series={series}\n        date={date}\n        categories={categories}\n      />\n      {thumbnail && <BackgroundImage image={thumbnail} alt=\"thumbnail\" />}\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst MarkdownRenderer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding: 100px 0;\n  word-break: keep-all;\n\n  line-height: 1.8;\n  font-size: 16px;\n  font-weight: 400;\n\n  p {\n    padding: 3px 0;\n  }\n\n  h1,\n  h2,\n  h3 {\n    font-weight: 800;\n    margin-bottom: 30px;\n  }\n\n  * + h1,\n  * + h1,\n  * + h3 {\n    margin-top: 80px;\n  }\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 25px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 2px solid #000000;\n    font-weight: 800;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 30px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid #000000;\n    margin: 100px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = ({ html }) => {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'xogus303/xogus303.github.io'\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst CommentWidget: FunctionComponent = () => {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n  return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { cssState } from 'constants/type'\n\nconst Wrapper = styled.div`\n  position: fixed;\n  top: 46px;\n  width: 100%;\n`\nconst Indicator = styled.div<cssState>`\n  width: ${props => props.percent}%;\n  height: 10px;\n  background-color: #aaa;\n`\n\ninterface PostScrollIndicatorProps {\n  widthPercent: number\n}\n\nconst PostScrollIndicator = ({ widthPercent }: PostScrollIndicatorProps) => {\n  return (\n    <Wrapper>\n      <Indicator percent={widthPercent} />\n    </Wrapper>\n  )\n}\n\nexport default PostScrollIndicator\n","import React, { FunctionComponent, useEffect, useState } from 'react'\nimport { graphql } from 'gatsby'\n\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/Posts/PostHead'\nimport { PostFrontmatterType } from 'types/PostItem.types'\nimport PostContent from 'components/Posts/PostContent'\nimport CommentWidget from 'components/Posts/CommentWidget'\nimport PostScrollIndicator from 'components/Posts/PostScrollIndicator'\n\nexport type PostPageItemType = {\n  node: {\n    html: string\n    frontmatter: PostFrontmatterType\n  }\n}\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      frontmatter: { title, series, summary, date, categories, thumbnail },\n    },\n  } = edges[0]\n\n  const [pageHeight, setPageHeight] = useState<number>(0)\n  const [scrollY, setScrollY] = useState<number>(0)\n  const handleScrollIndicator = () => {\n    setScrollY(window.pageYOffset)\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScrollIndicator)\n    return () => {\n      window.removeEventListener('scroll', handleScrollIndicator)\n    }\n  }, [])\n\n  useEffect(\n    () => {\n      if (window !== 'undefined') {\n        setPageHeight(document.body.scrollHeight - document.body.clientHeight)\n      }\n    },\n    window !== 'undefined'\n      ? [document?.body.scrollHeight, document.body.clientHeight]\n      : [],\n  )\n\n  const scrollGauge = (scrollY * 100) / pageHeight\n  return (\n    <Template\n      title={title + series}\n      description={summary}\n      url={href}\n      image={thumbnail?.publicURL}\n    >\n      <PostScrollIndicator widthPercent={scrollGauge} />\n      <PostHead\n        title={title}\n        series={series}\n        date={date}\n        categories={categories}\n        thumbnail={thumbnail?.childImageSharp?.gatsbyImageData}\n      />\n      <PostContent html={html} />\n      <CommentWidget />\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            series\n            summary\n            date(formatString: \"YYYY.MM.DD\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["PostHeadInfoWrapper","PrevPageIcon","PostHeadInfoWrap","Title","Series","_styled","process","PostData","title","series","date","categories","___EmotionJSX","onClick","navigate","FontAwesomeIcon","icon","faArrowLeft","color","join","PostHeadWrapper","BackgroundImage","props","GatsbyImage","thumbnail","PostHeadInfo","image","alt","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","Wrapper","Indicator","percent","widthPercent","edges","data","allMarkdownRemark","href","location","node","frontmatter","summary","useState","pageHeight","setPageHeight","scrollY","setScrollY","handleScrollIndicator","window","pageYOffset","addEventListener","removeEventListener","body","scrollHeight","clientHeight","_document","scrollGauge","Template","description","url","publicURL","PostScrollIndicator","PostHead","childImageSharp","_thumbnail$childImage","gatsbyImageData","PostContent","CommentWidget"],"sourceRoot":""}